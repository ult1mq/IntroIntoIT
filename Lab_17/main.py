import sys
import os
import torch
from PIL import Image
import numpy as np
from facenet_pytorch import MTCNN, InceptionResnetV1

# –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
KNOWN_PATH   = "known.jpg"
UNKNOWN_PATH = "unknown.jpg"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
for path in (KNOWN_PATH, UNKNOWN_PATH):
    if not os.path.isfile(path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü –∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
mtcnn = MTCNN(keep_all=False, device="cpu")
resnet = InceptionResnetV1(pretrained="vggface2").eval().to("cpu")

def get_embedding(path: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ 512-—Ä–∞–∑–º–µ—Ä–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞."""
    img = Image.open(path).convert("RGB")
    # –î–µ—Ç–µ–∫—Ç–∏–º –∏ –≤—ã—Ä–µ–∑–∞–µ–º –ª–∏—Ü–æ (—Ä–∞–∑–º–µ—Ä 160√ó160)
    face = mtcnn(img)
    if face is None:
        print(f"‚ùå –õ–∏—Ü–æ –Ω–∞ {path} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        sys.exit(1)
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ (1√ó512)
    with torch.no_grad():
        emb = resnet(face.unsqueeze(0))
    return emb[0].cpu().numpy()

# –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–≤—É—Ö —Ñ–æ—Ç–æ
emb1 = get_embedding(KNOWN_PATH)
emb2 = get_embedding(UNKNOWN_PATH)

# –°—á–∏—Ç–∞–µ–º –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
distance = np.linalg.norm(emb1 - emb2)

# –ü–æ—Ä–æ–≥ –¥–ª—è FaceNet –æ–±—ã—á–Ω–æ ~1.0
match = distance < 1.0

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ FaceNet:")
print(f"  ‚û§ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ –î–∞' if match else '‚ùå –ù–µ—Ç'}")
print(f"  ‚û§ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.4f} (–º–µ–Ω—å—à–µ 1.0 ‚Üí —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)\n")
